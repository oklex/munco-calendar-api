{"version":3,"sources":["components/DatesRemaining/DatesRemaining.tsx","containers/Error404/Error404.tsx","components/singleEventLink/CalendarCard.tsx","services/constants.ts","services/CalendarService/CalendarService.ts","containers/Calendar/Calendar.tsx","services/Firebase/context.ts","services/Notifications/notifications.ts","services/Firebase/index.ts","services/Firebase/firebase.ts","containers/Subscribe/Subscribe.tsx","containers/App/App.tsx","serviceWorker.js","index.js"],"names":["TimerBarClass","Error404","className","name","content","role","aria-label","to","React","Component","DatesRemaining","state","currentDate","props","Date","startMoment","moment","startDate","startOf","endMoment","endDate","endOf","startDateText","format","endDateText","oneWeekFromNow","add","timerBarClass","timerDisplayDate","timerDescription","timerDaysRemaining","componentDidMount","daysRemaining","getDaysUntil","toDate","setState","isBefore","CLOSED","isSame","OPEN","isAfter","Error","WAITING","renderDateDescription","renderTimerBar","comingDate","segments","renderSegments","n","returnJSX","i","push","key","comingTime","currentTime","days","diff","Math","ceil","this","CalendarCard","renderTitle","CardDetails","organization","short_name","full_name","showEvents","events","map","renderSingleEvent","eventDetails","dateMoment","utc","start_date","startDay","dateYear","date","end_date","venue_name","venue_city","showEventTags","tags","length","tag","index","info","renderApplications","applications","renderSingleApplication","app","cost","toString","href","applicationLink","target","rel","conferenceAPI","axios","create","baseURL","sortBy","CalendarService","getAll","get","data","getUpcoming","CalendarFilterTypes","allCalendarFilterTypes","allApps","staffApps","secretariatApps","delegateRegistration","volunteer","Calendar","allCalendarEvents","selectedFilter","loading","a","renderArrow","text","showAllCards","event","selectFilter","showAllFilterOptions","filterOptions","type","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","data-tip","FirebaseContext","createContext","NotificationService","check","fcmToken","post","register","unregister","patch","Firebase","auth","messaging","getFCMToken","console","log","getToken","then","currentToken","settings","catch","err","deleteFCMTOken","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","undefined","initializeApp","usePublicVapidKey","onMessage","payload","Notification","notification","title","icon","body","Subscribe","subButton","e","context","deleteFCMButton","onClick","contextType","App","show404","showCalendar","showSubscribe","charSet","exact","path","component","Boolean","window","location","hostname","match","require","ReactDOM","render","Provider","value","document","getElementById","navigator","serviceWorker","ready","registration"],"mappings":"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","file":"static/js/main.55ea33f7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./DatesRemaining.scss\";\r\nimport moment, { Moment } from \"moment\";\r\n\r\ninterface IDatesRemainingProps {\r\n  startDate: Date;\r\n  endDate: Date;\r\n  currentDate?: Date;\r\n}\r\n\r\ninterface IDatesRemainingState {\r\n  currentDate: Date;\r\n  oneWeekFromNow: Moment;\r\n  startMoment: Moment;\r\n  endMoment: Moment;\r\n  startDateText: string;\r\n  endDateText: string;\r\n  timerBarClass: TimerBarClass | null;\r\n  timerDisplayDate: Date | null;\r\n  timerDescription: string | null;\r\n  timerDaysRemaining: string | null;\r\n}\r\n\r\nenum TimerBarClass {\r\n  WAITING = \"waiting\",\r\n  OPEN = \"open\",\r\n  CLOSED = \"closed\",\r\n}\r\n\r\nclass DatesRemaining extends React.Component<\r\n  IDatesRemainingProps,\r\n  IDatesRemainingState\r\n> {\r\n  state: IDatesRemainingState = {\r\n    currentDate: this.props.currentDate ? this.props.currentDate : new Date(),\r\n    startMoment: moment(this.props.startDate).startOf(\"day\"),\r\n    endMoment: moment(this.props.endDate).endOf(\"day\"),\r\n    startDateText: moment(this.props.startDate).format(\"(dddd), MMM Do\"),\r\n    endDateText: moment(this.props.endDate).format(\"(dddd), MMM Do\"),\r\n    oneWeekFromNow: moment(new Date()).add(7, \"days\"),\r\n    timerBarClass: null,\r\n    timerDisplayDate: null,\r\n    timerDescription: null,\r\n    timerDaysRemaining: null,\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    //console.log(this.props, \" c. \", this.state);\r\n    //console.log(\"date test: \", new Date(this.props.endDate));\r\n\r\n    const daysRemaining: number = this.getDaysUntil(\r\n      this.state.endMoment.toDate()\r\n    );\r\n    this.setState({\r\n      timerDaysRemaining: \"[ \" + daysRemaining + \" days remaining ]\",\r\n    });\r\n    if (this.state.endMoment.isBefore()) {\r\n      //console.log(\r\n      //   \"ended on: \",\r\n      //   this.props.endDate,\r\n      //   \"it is currently\",\r\n      //   this.state.currentDate,\r\n      //   this.state.endDateText\r\n      // );\r\n      this.setState({\r\n        timerBarClass: TimerBarClass.CLOSED,\r\n        timerDisplayDate: this.props.endDate,\r\n        timerDescription: \"closed on \" + this.state.endDateText,\r\n      });\r\n    } else if (this.state.startMoment.isBefore()) {\r\n      // has started\r\n      if (\r\n        this.state.endMoment.isSame(moment(), \"day\") &&\r\n        this.state.endMoment.isSame(moment(), \"month\")\r\n      ) {\r\n        //console.log(\r\n        //   \"closing today\",\r\n        //   this.props.endDate,\r\n        //   this.state.currentDate\r\n        // );\r\n        this.setState({\r\n          timerBarClass: TimerBarClass.OPEN,\r\n          timerDisplayDate: this.props.endDate,\r\n          timerDescription: \"closing today! \" + this.state.endDateText,\r\n        });\r\n      } else if (this.state.endMoment.isBefore(this.state.oneWeekFromNow)) {\r\n        //console.log(\"closing soon\", this.props.endDate, this.state.currentDate);\r\n        this.setState({\r\n          timerBarClass: TimerBarClass.OPEN,\r\n          timerDisplayDate: this.props.endDate,\r\n          timerDescription: \"closing soon; on \" + this.state.endDateText,\r\n        });\r\n      } else {\r\n        //console.log(\"closing later\");\r\n        this.setState({\r\n          timerBarClass: TimerBarClass.OPEN,\r\n          timerDisplayDate: this.props.endDate,\r\n          timerDescription: \"started; closing on \" + this.state.endDateText,\r\n        });\r\n      }\r\n    } else if (this.state.startMoment.isAfter()) {\r\n      // has not yet started\r\n      this.setState({\r\n        timerBarClass: TimerBarClass.WAITING,\r\n        timerDisplayDate: this.props.startDate,\r\n        timerDescription: \"opens on \" + this.state.startDateText,\r\n      });\r\n    } else {\r\n      throw Error(\"dates comparisons failed\");\r\n    }\r\n  };\r\n\r\n  renderDateDescription = () => {\r\n    return (\r\n      <p className=\"weight-300 miniText\">\r\n        {this.state.timerDescription}\r\n        <br />\r\n        {this.state.timerDaysRemaining}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  renderTimerBar = () => {\r\n    if (this.state.timerBarClass && this.state.timerDisplayDate) {\r\n      const comingDate: Date = this.state.timerDisplayDate;\r\n      const segmentLimit: number = 21;\r\n      const segments: number = this.getDaysUntil(comingDate);\r\n      if (segments > segmentLimit) {\r\n        // return a solid bar\r\n        return <div className={this.state.timerBarClass + \"-full\"}></div>;\r\n      } else {\r\n        //console.log(segments);\r\n        return (\r\n          <div className={this.state.timerBarClass}>\r\n            {this.renderSegments(segments)}\r\n          </div>\r\n        );\r\n      }\r\n    } else {\r\n      return <div>no data</div>;\r\n    }\r\n  };\r\n\r\n  renderSegments = (n: number) => {\r\n    let returnJSX: JSX.Element[] = [];\r\n\r\n    for (var i: number = 0; i < n; i++) {\r\n      returnJSX.push(\r\n        <div\r\n          key={i}\r\n          className={\r\n            \"s-\" +\r\n            i +\r\n            \" \" +\r\n            \"segment\" +\r\n            \" \" +\r\n            \"segment-\" +\r\n            this.state.timerBarClass\r\n          }\r\n        ></div>\r\n      );\r\n    }\r\n    return returnJSX;\r\n  };\r\n\r\n  getDaysUntil = (comingDate: Date) => {\r\n    let millisecondsPerDay = 1000 * 60 * 60 * 24;\r\n    let comingTime: Moment = moment(comingDate);\r\n    let currentTime: Moment = moment(this.state.currentDate);\r\n    let millisBetween = comingTime.diff(currentTime);\r\n    let days = millisBetween / millisecondsPerDay;\r\n    //console.log(\"days until: \", comingDate, Math.ceil(days));\r\n    return Math.ceil(days);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"date-indicator\">{this.renderTimerBar()}</div>\r\n        {this.renderDateDescription()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DatesRemaining;\r\n","import React from \"react\";\r\nimport \"./Error404.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nclass Error404 extends React.Component<{}, {}> {\r\n  render() {\r\n    return (\r\n      <div className=\"errorPage\">\r\n        <Helmet>\r\n          <meta name=\"robots\" content=\"noindex\" />\r\n        </Helmet>\r\n        <div className=\"container\">\r\n          <h1><span role='img' aria-label='thinking-emoji'>🤔</span></h1>\r\n          <h1>404</h1>\r\n          <p>\r\n            {\"page not found  -  \"}\r\n            <Link to=\"/\" className=\"btn-gold\">\r\n              Go back to home\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Error404;\r\n","import React from \"react\";\r\nimport {\r\n  ICalendarResponse,\r\n  IConferenceEvent,\r\n  IApplicationEvent,\r\n} from \"../../models/CalendarEvent\";\r\nimport \"./CalendarCard.scss\";\r\nimport moment from \"moment\";\r\nimport DatesRemaining from \"../DatesRemaining/DatesRemaining\";\r\n\r\ninterface ICalendarCardProps {\r\n  CardDetails: ICalendarResponse;\r\n}\r\n\r\n// this displays the calendar card depending on the input data: ICalendarResponse[]\r\n// it is the responsibility of the API to return the correct data\r\nexport class CalendarCard extends React.Component<ICalendarCardProps, {}> {\r\n  renderTitle = () => {\r\n    return (\r\n      <div className=\"title\">\r\n        <h1>{this.props.CardDetails.organization.short_name}</h1>\r\n        <p className=\"blueText miniText\">\r\n          {this.props.CardDetails.organization.full_name}\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  showEvents = () => {\r\n    if (this.props.CardDetails.events) {\r\n      return this.props.CardDetails.events.map(this.renderSingleEvent);\r\n    } else {\r\n      return <div />;\r\n    }\r\n  };\r\n\r\n  renderSingleEvent = (eventDetails: IConferenceEvent) => {\r\n    const dateMoment: any = moment.utc(eventDetails.start_date);\r\n    var startDay: string = dateMoment.format(\"(dddd), MMM Do\");\r\n    var dateYear: string = dateMoment.format(\", YYYY\");\r\n    var date: string = startDay + dateYear;\r\n    if (eventDetails.end_date) {\r\n      const endDateMoment: any = moment.utc(eventDetails.end_date);\r\n      var endDay: string = endDateMoment.format(\" - (dddd), MMM Do\");\r\n      date = startDay + endDay + dateYear;\r\n    }\r\n    return (\r\n      <div className=\"eventDetails\">\r\n        <p className=\"blueText\">{date}</p>\r\n        <p className=\"miniText\">\r\n          {eventDetails.venue_name}, {eventDetails.venue_city}\r\n        </p>\r\n        {this.showEventTags(eventDetails)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  showEventTags = (eventDetails: IConferenceEvent) => {\r\n    if (eventDetails.tags.length > 0) {\r\n      return eventDetails.tags.map((tag: string, index: number) => {\r\n        const info: string = eventDetails.tags[index];\r\n        return (\r\n          <span key={index} className=\"tag\">\r\n            <p>{info}</p>\r\n          </span>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  renderApplications = () => {\r\n    if (this.props.CardDetails.applications) {\r\n      const allApps: IApplicationEvent[] = this.props.CardDetails.applications;\r\n      return allApps.map(this.renderSingleApplication);\r\n    }\r\n  };\r\n\r\n  renderSingleApplication = (app: IApplicationEvent, key: number) => {\r\n    // const dateMoment: any = moment.utc(app.start_date);\r\n    // const date: string = dateMoment.format(\"(dddd), MMM Do\");\r\n    var cost: string = \"\";\r\n    if (app.cost) cost = \"$\" + app.cost.toString();\r\n    return (\r\n      <div className=\"AppDetails\" key={key}>\r\n        <div className=\"d-flex justify-content-between\">\r\n          <h5 className=\"weight-400\">\r\n              {app.name} {cost}\r\n          </h5>\r\n          <span>\r\n            <button>\r\n              <a\r\n                className=\"applyBtn\"\r\n                href={app.applicationLink}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Apply\r\n              </a>\r\n            </button>\r\n          </span>\r\n        </div>\r\n        <DatesRemaining\r\n          key={key}\r\n          startDate={app.start_date}\r\n          endDate={app.end_date}\r\n        />\r\n        {/* <p className=\"miniText\">{date}</p> */}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CalendarCard\">\r\n        {this.renderTitle()}\r\n        {this.showEvents()}\r\n        {this.renderApplications()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalendarCard;\r\n","import axios from 'axios'\r\n\r\nconst eventApiEndpoint = 'https://munco-calendar.herokuapp.com/'\r\nlet conferenceAPI = eventCreateAxiosInstance()\r\n\r\n\r\nfunction eventCreateAxiosInstance() {\r\n    return axios.create({\r\n        baseURL: eventApiEndpoint\r\n    })\r\n}\r\n\r\nexport { eventApiEndpoint, conferenceAPI}","import { ICalendarResponse } from \"../../models/CalendarEvent\";\r\nimport { conferenceAPI } from \"../constants\";\r\n\r\nexport const CalendarService = {\r\n  async getAll(): Promise<ICalendarResponse[]> {\r\n    try {\r\n      const { data } = await conferenceAPI.get('/api/applications/all')\r\n      return data\r\n    } catch (err) {\r\n      return [];\r\n    }\r\n  },\r\n  async getUpcoming(): Promise<ICalendarResponse[]> {\r\n    try {\r\n      const { data } = await conferenceAPI.get('/api/applications/upcoming')\r\n      return data\r\n    } catch (err) {\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\r\nexport enum sortBy {\r\n  name,\r\n  application,\r\n  event\r\n}\r\n\r\nexport default CalendarService;\r\n","import React from \"react\";\r\n// import CalendarCard from \"../../../components/SingleEventLink/CalendarCard\";\r\n// import { ICalendarResponse } from \"../../../models/CalendarEvent\";\r\nimport CalendarCard from \"../../components/singleEventLink/CalendarCard\";\r\nimport { ICalendarResponse } from \"../../models/CalendarEvent\";\r\nimport CalendarService from \"../../services/CalendarService/CalendarService\";\r\nimport \"./Calendar.scss\";\r\nimport Helmet from \"react-helmet\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\ninterface ICalendarState {\r\n  allCalendarEvents: ICalendarResponse[];\r\n  loading: boolean;\r\n  selectedFilter: CalendarFilterTypes;\r\n}\r\n\r\nenum CalendarFilterTypes {\r\n  allApps = \"All Applications\",\r\n  staffApps = \"Staff Applications\",\r\n  secretariatApps = \"Secretariat Applications\",\r\n  delegateRegistration = \"Delegate Registration\",\r\n  volunteer = \"Volunteer Opportunities\",\r\n}\r\n\r\nconst allCalendarFilterTypes: CalendarFilterTypes[] = [\r\n  CalendarFilterTypes.allApps,\r\n  CalendarFilterTypes.staffApps,\r\n  CalendarFilterTypes.secretariatApps,\r\n  CalendarFilterTypes.delegateRegistration,\r\n  CalendarFilterTypes.volunteer,\r\n];\r\n\r\n// this contains the page\r\n// which contains search selection & carousel that contains Calendar cards\r\nexport class Calendar extends React.Component<{}, ICalendarState> {\r\n  state = {\r\n    allCalendarEvents: [],\r\n    selectedFilter: CalendarFilterTypes.allApps,\r\n    loading: true,\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    const allCalendarEvents: ICalendarResponse[] = await CalendarService.getAll();\r\n    this.setState({\r\n      allCalendarEvents: allCalendarEvents,\r\n      loading: false,\r\n    });\r\n  };\r\n\r\n  renderArrow = (text: string, className: string) => {\r\n    return <div className={className}>{text}</div>;\r\n  };\r\n\r\n  showAllCards = () => {\r\n    if (this.state.loading === true) {\r\n      return (\r\n        <div className=\"errorMessage\">\r\n          <h3>Loading...</h3>\r\n        </div>\r\n      );\r\n    } else if (this.state.allCalendarEvents.length === 0) {\r\n      return (\r\n        <div className=\"errorMessage\">\r\n          <h1>oops &#128552;</h1>\r\n          <p>\r\n            we encountered some problem <br />\r\n            check back later!\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return this.state.allCalendarEvents.map(\r\n        (event: ICalendarResponse, key: number) => {\r\n          if (\r\n            !event.applications ||\r\n            (event.applications && event.applications.length === 0)\r\n          ) {\r\n            return <div key={key}></div>; // omit no applications\r\n          } else {\r\n            return <CalendarCard key={key} CardDetails={event} />;\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  selectFilter = () => {\r\n    return (\r\n      <div className=\"filterBar\">\r\n        <div className=\"d-flex\">\r\n          <div>\r\n            <h2>Filter by: </h2>\r\n          </div>\r\n          <div className=\"flex-grow-1 selection\">\r\n            <p className=\"selectionText\">Applications</p>\r\n          </div>\r\n        </div>\r\n        <ul>{this.showAllFilterOptions()}</ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  filterOptions = () => {\r\n    return (\r\n      <div className=\"filterBar\">\r\n        <div className=\"d-flex\">\r\n          <div>\r\n            <h2>Filter by: </h2>\r\n          </div>\r\n          <div className=\"dropdown flex-grow-1 selection\">\r\n            <button\r\n              className=\"btn selectionBtn selectionText dropdown-toggle\"\r\n              type=\"button\"\r\n              id=\"dropdownMenuButton\"\r\n              data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\"\r\n              aria-expanded=\"false\"\r\n            >\r\n              {this.state.selectedFilter}\r\n            </button>\r\n            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n              {this.showAllFilterOptions()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  showAllFilterOptions = () => {\r\n    return allCalendarFilterTypes.map((type: string) => {\r\n      if (type !== this.state.selectedFilter) {\r\n        return (\r\n          <span\r\n            className=\"filterOption notAvailable dropdown-item\"\r\n            data-tip=\"option not available yet\"\r\n            key={type.toString()}\r\n          >\r\n            {type}\r\n          </span>\r\n        );\r\n      } else return null\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ConferenceCalendar\">\r\n        <ReactTooltip />\r\n        <Helmet>\r\n          <title>Conference Applications</title>\r\n          <meta\r\n            name=\"description\"\r\n            content=\"Calendar for Model UN conferences in BC and internationally. See all dates and site links and more.\"\r\n          />\r\n          <link rel=\"canonical\" href=\"https://wwww.munco.ca/calendar\" />\r\n        </Helmet>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-6 colapseOnMobile\">\r\n            <div className=\"fixed-cover\">\r\n              <div className=\"title\">\r\n                <h1>Conference Calendar</h1>\r\n                {this.filterOptions()}\r\n                <div className=\"menu-tools\">\r\n                  <div className=\"menu-tag\">\r\n                    Do you manage a conference?\r\n                    <p className=\"tooltiptext\">\r\n                      Tell us what dates you're planning!\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"menu-tag\">\r\n                    Report a problem\r\n                    <p className=\"tooltiptext\">\r\n                      PM us on Facebook or Instagram!\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <div className=\"calendar-section\">{this.showAllCards()}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calendar;\r\n","import React from 'react';\r\n \r\nconst FirebaseContext = React.createContext(null);\r\n \r\nexport default FirebaseContext;\r\n//www.robinwieruch.de/complete-firebase-authentication-react-tutorial#firebase-in-react-setup","import { conferenceAPI } from \"../constants\"\r\n\r\nexport const NotificationService = {\r\n    async check(fcmToken: string): Promise<boolean> {\r\n        const { data } = await conferenceAPI.post('/api/notifications/check', { fcmToken })\r\n        return data\r\n    },\r\n    async register(fcmToken: string): Promise<any> {\r\n        const { data } = await conferenceAPI.post('/api/notifications/register', { fcmToken })\r\n        return data\r\n    },\r\n    async unregister(fcmToken: string): Promise<any> {\r\n        const { data } = await conferenceAPI.patch('/api/notifications/unregister', { fcmToken })\r\n        return data\r\n    }\r\n}\r\n\r\nexport default NotificationService","import FirebaseContext from './context';\r\nimport Firebase from './firebase';\r\n \r\nexport default Firebase;\r\n \r\nexport { FirebaseContext };\r\n//www.robinwieruch.de/complete-firebase-authentication-react-tutorial#firebase-in-react-setup","import app from 'firebase/app';\r\nimport 'firebase/messaging'\r\nimport 'firebase/auth'\r\nimport NotificationService from '../Notifications/notifications';\r\n\r\nclass Firebase {\r\n  auth: any;\r\n  messaging: any;\r\n  fcmToken: string | null;\r\n  constructor() {\r\n    let config: any = {\r\n      apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n      authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n      databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n      projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n      storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n      messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\r\n      appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n    };\r\n    if (config.databaseURL !== undefined) {\r\n      try {\r\n        app.initializeApp(config);\r\n        this.auth = app.auth();\r\n        this.fcmToken = null;\r\n        this.messaging = app.messaging()\r\n        const key: any = process.env.REACT_APP_PUBLIC_VAPID_KEY;\r\n        if (key !== undefined) {\r\n          this.messaging.usePublicVapidKey(key);\r\n          this.messaging.onMessage((payload: any) => {\r\n            console.log(\"Message recieved \", payload);\r\n            new Notification(payload.notification.title, {\r\n                  icon: 'https://s3-us-west-2.amazonaws.com/munco.ca/brand/Original+02-700px.png',\r\n                  body: payload.notification.body,\r\n                })\r\n          })\r\n        } else {\r\n          console.log(\"no web-notification key\");\r\n          throw Error(\"no web-notification key\");\r\n        }\r\n        console.log(\"Firebase connected\");\r\n      } catch (err) {\r\n        console.log(\"Firebase connection failed: \", err);\r\n        throw err\r\n      }\r\n    } else {\r\n      console.log(\"Firebase connection failed\");\r\n      throw Error(\"Firebase configuration failed\")\r\n    }\r\n  }\r\n\r\n  getFCMToken = async () => {\r\n    console.log(\"Firebase::getFCMToken()\")\r\n    return await this.messaging\r\n      .getToken()\r\n      .then(async (currentToken: string) => {\r\n        if (currentToken.length > 0) {\r\n          console.log(\"currentToken recieved\");\r\n          this.fcmToken = currentToken;\r\n          let check: any = await NotificationService.check(this.fcmToken)\r\n          if (check.settings) {\r\n            console.log('token already registered ', check)\r\n            return check\r\n          } else {\r\n            console.log('registering token ')\r\n            return await NotificationService.register(this.fcmToken)\r\n          }\r\n        } else {\r\n          throw Error(\"bad token\")\r\n        }\r\n      })\r\n      .catch((err: Error) => {\r\n        console.log(\"An error occurred while retrieving token. \", err);\r\n      });\r\n  }\r\n\r\n  deleteFCMTOken = () => {\r\n    console.log('Firebase::deleteFCMTOken()')\r\n    if (this.fcmToken) {\r\n      try {\r\n        NotificationService.unregister(this.fcmToken)\r\n      } catch (err) {\r\n        console.log(err)\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default Firebase","import React from \"react\";\r\nimport \"./Subscribe.scss\";\r\nimport { FirebaseContext } from \"../../services/Firebase\";\r\n// import Firebase from \"../../services/Firebase/firebase\";\r\n\r\nclass Subscribe extends React.Component<{}, {}> {\r\n  static contextType = FirebaseContext\r\n\r\n  subButton = (e: any) => {\r\n    let firebase = this.context;\r\n    firebase.getFCMToken()\r\n  }\r\n\r\n  deleteFCMButton = (e: any) => {\r\n    let firebase = this.context;\r\n    firebase.deleteFCMTOken()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"subscribePage container\">\r\n        <h3>Subscribe to web-notifications</h3>\r\n\t\t\t\t<button onClick={this.subButton}>\r\n\t\t\t\t\tset-up web notifications\r\n\t\t\t\t</button>\r\n        <br/>\r\n\t\t\t\t<button onClick={this.deleteFCMButton}>\r\n\t\t\t\t\tcancel your web notifications\r\n\t\t\t\t</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Subscribe;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Helmet from \"react-helmet\";\nimport Error404 from \"../Error404/Error404\";\nimport Calendar from \"../Calendar/Calendar\";\nimport Subscribe from \"../Subscribe/Subscribe\";\n\nclass App extends React.Component<{}, {}> {\n  show404 = () => {\n    return <Error404 />;\n  };\n\n  showCalendar = () => {\n    return <Calendar/>\n  }\n\n  showSubscribe = () => {\n    return <Subscribe/>\n  }\n\n  render() {\n    return (\n      <Router>\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <meta\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0\"\n          />\n        </Helmet>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\" component={this.showCalendar} />\n            <Route exact path=\"/subscribe\" component={this.showSubscribe} />\n            <Route component={this.show404} />\n          </Switch>\n          {/* <Footer /> */}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./containers/App/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./styles/index.scss\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport Firebase, { FirebaseContext } from './services/Firebase';\r\n\r\nrequire('dotenv').config()\r\n\r\nReactDOM.render(\r\n  <FirebaseContext.Provider value={new Firebase()}>\r\n    <App />\r\n  </FirebaseContext.Provider>,\r\n  document.getElementById('root'),\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}